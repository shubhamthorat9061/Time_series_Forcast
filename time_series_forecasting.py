# -*- coding: utf-8 -*-
"""Time_series_Forecasting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ND7E3iXUOrel1OwqSd_EkMOlW7RCe-j9
"""

import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt

from statsmodels. tsa.api import ExponentialSmoothing, SimpleExpSmoothing, Holt
from sklearn.linear_model import LinearRegression

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("/gold_monthly_csv.csv")
df.head()

df.shape

print(f"Data range of gold prices available from - {df.loc[:,'Date'][0]} to {df.loc[:, 'Date'][len(df)-1]}")

date = pd.date_range (start = '1/1/1950', end = '8/1/2020' , freq = 'M')
date

df ['month'] = date
df.drop('Date' , axis =1, inplace = True)
df = df.set_index('month')
df.head()

df.plot(figsize=(20,8))
plt.title("gold prices monthly since 1950 and onwards")
plt.xlabel("months")
plt.ylabel("price")
plt.grid();

round(df.describe(),3)

_, ax = plt.subplots(figsize=(25,8))
sns.boxplot(x= df.index.year, y = df.values[:,0], ax=ax)
plt.title('gold price monthy since 1950 onwards')

plt.xticks(rotation = 90)
plt.grid()

from statsmodels.graphics.tsaplots import month_plot

fig, ax = plt.subplots(figsize=(22,8))
month_plot (df, ylabel = 'gold price', ax = ax)
plt.title('gold price monthy since 1950 onwards')
plt.xlabel('month')
plt.ylabel('price')
plt.grid()

_, ax = plt.subplots(figsize=(22,8))
sns.boxplot(x = df.index.month_name(), y = df.values[:, 0], ax = ax)
plt.title('gold price monthy since 1950 onwards')
plt.xlabel('month')
plt.ylabel('price')
plt.show()

df_yearly_sum = df.resample('A').mean()
df_yearly_sum.plot();
plt.title("avg gold price yearly since 1950")
plt.xlabel('year')
plt.ylabel('price')
plt.grid()

df_quaterly_sum = df.resample('Q').mean()
df_quaterly_sum.plot();
plt.title('avg gold price quaterly since 1950')
plt.xlabel('quarter')
plt.ylabel('price')
plt.show()

df_decade_sum = df.resample('10Y').mean()
df_decade_sum.plot();
plt.title('avg gold price per decade since 1950')
plt.xlabel('decade')
plt.ylabel('price')
plt.grid()

df_1 = df.groupby(df.index.year).mean().rename(columns={'Price': 'Mean'})
df_1 = df_1.merge(df.groupby(df.index.year).std().rename(columns={'Price': 'Std'}), left_index=True, right_index=True)
df_1['Cov_pct'] = ((df_1['Std'] / df_1['Mean']) * 100).round(2)
df_1.head()

fig, ax= plt.subplots(figsize= (15,10))
df_1['Cov_pct'].plot()
plt.title('avg gold price per decade since 1950')
plt.xlabel('decade')
plt.ylabel('cv in %')
plt.grid()

train = df [df.index.year <= 2015]
test = df[df.index.year > 2015]

print(train.shape)
print(test.shape)

train["Price"].plot(figsize=(13,5), fontsize = 15)
test["Price"].plot(figsize=(13,5), fontsize = 15)
plt.grid()
plt.legend(['Training Data', 'Test Data'])
plt.show()

train_time = [i+1 for i in range(len(train))]
test_time = [i+len(train)+1 for i in range (len(test))]
len(train_time), len(test_time)

LR_train = train.copy()
LR_test = test.copy()

LR_train['time']= train_time
LR_test['time']= test_time

lr = LinearRegression()
lr.fit(LR_train[['time']],LR_train["Price"].values)

test_predictions_model1 = lr.predict(LR_test[['time']])
LR_test['forecast'] = test_predictions_model1

plt.figure(figsize=(14, 6))
plt.plot(train['Price'], label='train')
plt.plot(test['Price'], label='test')
plt.plot(LR_test['forecast'], label='reg on time_test data')
plt.legend(loc='best')
plt.grid()

def mape(actual, pred):
  return round((np.mean(abs(actual - pred)/ actual))*100, 2)

mape_model1_test = mape (test['Price'].values, test_predictions_model1)
print("MAPE is %3.3f"% (mape_model1_test), "%")

results = pd.DataFrame({'Test Mape (%)': [mape_model1_test]}, index=['RegressionOnTime'])
results

Naive_train = train.copy()
Naive_test = test.copy()

Naive_test['naive'] = np.asarray(train[ 'Price'])[len (np.asarray(train[ 'Price']))-1]
Naive_test['naive'].head()

plt.figure(figsize=(12,8))
plt.plot(Naive_train[ 'Price'], label='Train')
plt.plot(test['Price'], label='Test')
plt.plot(Naive_test['naive'], label='Naive Forecast on Test Data')
plt.legend (loc='best')
plt.title("Naive Forecast")
plt.grid();

mape_model2_test = mape (test['Price'].values, Naive_test['naive'].values)
print("For Naive forecast on the Test Data, MAPE is %3.3f" % (mape_model2_test), "%")

resultsDf_2 = pd.DataFrame({'Test MAPE (%)': [mape_model2_test]},index=['NaiveModel'])
results = pd.concat ( [results, resultsDf_2])
results

final_model = ExponentialSmoothing(df, trend='additive', seasonal='additive').fit(
    smoothing_level=0.4,
    smoothing_trend=0.3,
    smoothing_seasonal=0.6
)

Mape_final_model = mape(df['Price'].values, final_model.fittedvalues)
print("MAPE: %3.3f" % Mape_final_model)

prediction = final_model.forecast(steps=len(test))

pred_df = pd.DataFrame({
    'lower_CI': prediction - 1.96 * np.std(final_model.resid, ddof=1),
    'prediction': prediction,
    'upper_CI': prediction + 1.96 * np.std(final_model.resid, ddof=1)
})
pred_df.head()

axis = df.plot(label = 'actual', figsize=(16,9))
pred_df['prediction'].plot(ax= axis, label = 'Forcast', alpha= 0.5)
axis.fill_between(pred_df.index, pred_df['lower_CI'], pred_df['upper_CI'], color = 'm',alpha = .15)
axis.set_xlabel('year-month')
axis.set_ylabel('price')
plt.legend (loc = 'best')
plt.grid()
plt.show()

